HIFI_READS = config.get('HIFI_READS')
ONT_READS  = config.get('ONT_READS')
HIC_READS1  = config.get('HIC_READS1')
HIC_READS2  = config.get('HIC_READS2')

PREVIOUS_VERKKO_RUN = config.get('PREVIOUS_VERKKO_RUN')
VERKKO = config.get('VERKKO')
PSTOOLS = config.get('PSTOOLS')

rule all:
    input:
        'final_consensus/assembly.fasta'

rule getUncompressedUnitigs:
    input:
        ont_reads  = ONT_READS,
        hifi_reads = HIFI_READS,
        verkko_run = PREVIOUS_VERKKO_RUN
    output:
        'consenus_unitigs/6-layoutContigs/unitig-popped.layout.scfmap',
        'consenus_unitigs/assembly.fasta'
    shell:
        "echo TEST"

rule copyFiles:
    input:
        '{PREVIOUS_VERKKO_RUN}/assembly.homopolymer-compressed.gfa'
        '{PREVIOUS_VERKKO_RUN}/assembly.homopolymer-compressed.noseq.gfa'
        'consenus_unitigs/6-layoutContigs/unitig-popped.layout.scfmap'
        'consenus_unitigs/assembly.fasta'
    output:
        'contigs_rename.map'
        'unitigs.fasta'
        'unitigs.hpc.fasta' 
        'unitigs.hpc.noseq.gfa'
       
rule runMashMap:
    input:
        'unitigs.hpc.fasta'
    output:
        'unitigs.matches'

rule alignHIC:
    input:
        HIC_READS1,
        HIC_READS2,
        'unitigs.fasta'       
    output:
        'hic_mapping.byread.output'

rule hicPhasing:
    input:
        old_run = PREVIOUS_VERKKO_RUN,
        mashmap_matches = 'unitigs.matches',
        hicmapping_byread = 'hic_mapping.byread.output',
        graph='unitigs.hpc.noseq.gfa'
    output:
        hic_compressed = 'hic.byread.compressed',
        hic_binned_unitigs = 'hicverkko.colors.tsv'
    shell: 'python3 hicverkko.py {input.old_run} . '
        

        
rule runRukki:
    input:
        graph = 'unitigs.hpc.noseq.gfa',
        binning = 'hicverkko.colors.tsv'
    output:
        tsv_path = 'rukki.paths.tsv',
        gaf_path = 'rukki.paths.gaf'
    shell:
#params taken from 6-rukki.sm
        '''
echo "---Running rukki on the resulting clustering"
params=" --init-assign out_init_ann.csv --refined-assign out_refined_ann.csv --final-assign out_final_ann.csv --marker-sparsity 5000 --issue-sparsity 1000 --try-fill-bubbles  --issue-len 200000  --marker-ratio 5. --issue-ratio 3. --issue-cnt 100"

{VERKKO}/lib/verkko/bin/rukki trio -g {input.graph} -m {input.binning} --gaf-format -p {output.tsv_path} $params
{VERKKO}/lib/verkko/bin/rukki trio -g {input.graph} -m {input.binning} --gaf-format -p {output.gaf_path} $params
        '''

rule getFinalContigs:
    input:
        ONT_READS,
        HIFI_READS,
        PREVIOUS_VERKKO_RUN,
        rukki_paths = 'rukki.paths.gaf'
    output:
        'final_consensus/assembly.fasta'
       
    shell: 'sh {VERKKO}/bin/verkko --slurm --paths {input.rukki_paths} --assembly {PREVIOUS_VERKKO_RUN} -d final_consensus --hifi {HIFI_READS} --nano {ONT_READS}'
    
